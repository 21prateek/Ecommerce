/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as OrdersIndexRouteImport } from './routes/orders/index'
import { Route as ProductAddRouteImport } from './routes/product/add'
import { Route as ProductProductIdRouteImport } from './routes/product/$productId'
import { Route as OrdersCartRouteImport } from './routes/orders/cart'
import { Route as AuthRegisterRouteImport } from './routes/auth/register'
import { Route as AuthProfileRouteImport } from './routes/auth/profile'
import { Route as AuthLoginRouteImport } from './routes/auth/login'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersIndexRoute = OrdersIndexRouteImport.update({
  id: '/orders/',
  path: '/orders/',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductAddRoute = ProductAddRouteImport.update({
  id: '/product/add',
  path: '/product/add',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductProductIdRoute = ProductProductIdRouteImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRouteImport,
} as any)
const OrdersCartRoute = OrdersCartRouteImport.update({
  id: '/orders/cart',
  path: '/orders/cart',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthProfileRoute = AuthProfileRouteImport.update({
  id: '/auth/profile',
  path: '/auth/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/orders/cart': typeof OrdersCartRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/add': typeof ProductAddRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/orders/cart': typeof OrdersCartRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/add': typeof ProductAddRoute
  '/orders': typeof OrdersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/profile': typeof AuthProfileRoute
  '/auth/register': typeof AuthRegisterRoute
  '/orders/cart': typeof OrdersCartRoute
  '/product/$productId': typeof ProductProductIdRoute
  '/product/add': typeof ProductAddRoute
  '/orders/': typeof OrdersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/register'
    | '/orders/cart'
    | '/product/$productId'
    | '/product/add'
    | '/orders'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/register'
    | '/orders/cart'
    | '/product/$productId'
    | '/product/add'
    | '/orders'
  id:
    | '__root__'
    | '/'
    | '/auth/login'
    | '/auth/profile'
    | '/auth/register'
    | '/orders/cart'
    | '/product/$productId'
    | '/product/add'
    | '/orders/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  OrdersCartRoute: typeof OrdersCartRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
  ProductAddRoute: typeof ProductAddRoute
  OrdersIndexRoute: typeof OrdersIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/': {
      id: '/orders/'
      path: '/orders'
      fullPath: '/orders'
      preLoaderRoute: typeof OrdersIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/add': {
      id: '/product/add'
      path: '/product/add'
      fullPath: '/product/add'
      preLoaderRoute: typeof ProductAddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/orders/cart': {
      id: '/orders/cart'
      path: '/orders/cart'
      fullPath: '/orders/cart'
      preLoaderRoute: typeof OrdersCartRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/profile': {
      id: '/auth/profile'
      path: '/auth/profile'
      fullPath: '/auth/profile'
      preLoaderRoute: typeof AuthProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  OrdersCartRoute: OrdersCartRoute,
  ProductProductIdRoute: ProductProductIdRoute,
  ProductAddRoute: ProductAddRoute,
  OrdersIndexRoute: OrdersIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
