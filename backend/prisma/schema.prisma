// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  role      UserRole   @default(USER)
  createdAt DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  provider  String? // 'GOOGLE', 'GITHUB' if doing OAuth or direct and null for local login 
  Orders    Orders[]
  CartItem  CartItem[]
  Payment   Payment[]
}

model Products {
  id        String      @id @default(cuid())
  name      String
  category  String
  stock     Int         @default(1)
  price     Int
  imageUrl  String?
  createdAt DateTime    @default(now())
  updateAt  DateTime    @updatedAt
  CartItem  CartItem[]
  OrderItem OrderItem[]
}

model Orders {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("PENDING")
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  orderItems OrderItem[]
  Payment    Payment?
}

model OrderItem {
  id         String @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int    @default(1)
  totalPrice Int

  order   Orders   @relation(fields: [orderId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id])
  product Products @relation(fields: [productId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  userId    String
  amount    Int
  currency  String   @default("INR")
  status    String   @default("PENDING") //SUCCESS,FAILED
  paymentId String //razor payment id
  createrAt DateTime @default(now())

  order Orders @relation(fields: [orderId], references: [id])
  user  User   @relation(fields: [userId], references: [id])
}
